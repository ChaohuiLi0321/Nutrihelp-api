#!/usr/bin/env python3
"""
NutriHelp Security Scanner V2.0 - Core Engine
"""

import os
import sys
import importlib
import logging
from typing import List, Dict, Any, Optional
from pathlib import Path

# Add the plugin directory to the Python path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from plugins.base_plugin import BaseSecurityPlugin, PluginManager, SecurityFinding


class SecurityScannerEngine:
    """Security Scanner Engine Core Class"""

    def __init__(self, config: Optional[Dict[str, Any]] = None):
        self.config = config or {}
        self.plugin_manager = PluginManager()
        self.logger = logging.getLogger("SecurityScannerEngine")
        self._setup_logging()

        # Statistics
        self.stats = {
            'files_scanned': 0,
            'total_findings': 0,
            'plugins_loaded': 0
        }
    
    def _setup_logging(self):
        """Set up logging configuration"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(),
                # can add file processors
            ]
        )
    
    def load_plugins(self, plugin_configs: Optional[Dict[str, Any]] = None):
        """Dynamically load plugins"""
        plugin_configs = plugin_configs or {}
        plugins_loaded = 0

        # Define plugin mappings
        plugin_mappings = {
            'jwt_missing_protection': 'plugins.jwt_security.jwt_missing',
            'jwt_configuration': 'plugins.jwt_security.jwt_config',
            'rls_missing_protection': 'plugins.rls_security.rls_missing',
            # can add more plugins
        }
        
        for plugin_name, module_path in plugin_mappings.items():
            plugin_config = plugin_configs.get(plugin_name, {})
            
            # Check if the plugin is enabled
            if not plugin_config.get('enabled', True):
                self.logger.info(f"Plugin {plugin_name} is disabled")
                continue
            
            try:
                # Dynamically import plugin module
                module = importlib.import_module(module_path)

                # Find plugin class (convention: ends with Plugin)
                plugin_class = None
                for attr_name in dir(module):
                    attr = getattr(module, attr_name)
                    if (isinstance(attr, type) and 
                        issubclass(attr, BaseSecurityPlugin) and 
                        attr != BaseSecurityPlugin):
                        plugin_class = attr
                        break
                
                if plugin_class:
                    plugin_instance = plugin_class(plugin_config.get('config', {}))
                    self.plugin_manager.register_plugin(plugin_instance)
                    plugins_loaded += 1
                else:
                    self.logger.warning(f"No plugin class found in {module_path}")
                    
            except ImportError as e:
                self.logger.warning(f"Could not load plugin {plugin_name}: {e}")
            except Exception as e:
                self.logger.error(f"Error loading plugin {plugin_name}: {e}")
        
        self.stats['plugins_loaded'] = plugins_loaded
        self.logger.info(f"Loaded {plugins_loaded} plugins")
    
    def scan_target(self, target_path: str) -> Dict[str, Any]:
        """Scan target path"""
        if not os.path.exists(target_path):
            raise FileNotFoundError(f"Target path does not exist: {target_path}")
        
        self.logger.info(f"Starting security scan on: {target_path}")

        # Run all plugin scans
        plugin_results = self.plugin_manager.run_all_scans(target_path)

        # Consolidate results
        all_findings = []
        for plugin_name, findings in plugin_results.items():
            all_findings.extend(findings)

        # Update statistics
        self.stats['total_findings'] = len(all_findings)
        self.stats['files_scanned'] = self._count_scannable_files(target_path)

        # Build scan result
        result = {
            'scan_info': {
                'target_path': target_path,
                'timestamp': self._get_timestamp(),
                'scanner_version': '2.0.0',
                'stats': self.stats
            },
            'findings': [f.to_dict() for f in all_findings],
            'summary': self._generate_summary(all_findings)
        }
        
        self.logger.info(f"Scan completed. Found {len(all_findings)} issues")
        return result
    
    def _count_scannable_files(self, target_path: str) -> int:
        """Count scannable files"""
        count = 0
        for root, dirs, files in os.walk(target_path):
            # Skip directories that should not be scanned
            dirs[:] = [d for d in dirs if not self._should_skip_dir(os.path.join(root, d))]
            
            for file in files:
                file_path = os.path.join(root, file)
                if self._is_scannable_file(file_path):
                    count += 1
        return count
    
    def _should_skip_dir(self, dir_path: str) -> bool:
        """Check if a directory should be skipped"""
        skip_dirs = self.config.get('exclude_directories', [
            'node_modules', '.git', '__pycache__', 'venv', '.venv', 
            'dist', 'build', 'uploads'
        ])
        dir_name = os.path.basename(dir_path)
        return dir_name in skip_dirs
    
    def _is_scannable_file(self, file_path: str) -> bool:
        """Check if a file is scannable"""
        supported_extensions = self.config.get('file_extensions', [
            '.js', '.ts', '.py', '.sql', '.json', '.yaml', '.yml'
        ])
        file_ext = os.path.splitext(file_path)[1].lower()
        return file_ext in supported_extensions
    
    def _generate_summary(self, findings: List[SecurityFinding]) -> Dict[str, Any]:
        """Generate scan summary"""
        summary = {
            'total': len(findings),
            'by_severity': {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0},
            'by_plugin': {}
        }
        
        for finding in findings:
            # Count by severity
            severity = finding.severity.upper()
            if severity in summary['by_severity']:
                summary['by_severity'][severity] += 1

            # Count by plugin
            plugin_name = finding.plugin or 'Unknown'
            if plugin_name not in summary['by_plugin']:
                summary['by_plugin'][plugin_name] = 0
            summary['by_plugin'][plugin_name] += 1
        
        return summary
    
    def _get_timestamp(self) -> str:
        """Get timestamp"""
        from datetime import datetime
        return datetime.now().isoformat()
    
    def get_scan_stats(self) -> Dict[str, Any]:
        """Get scan statistics"""
        return self.stats.copy()