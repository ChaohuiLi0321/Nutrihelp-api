#!/usr/bin/env python3
"""
NutriHelp Security Scanner V2.0 - Main Entry Point
Modular security scanner main program
"""

import os
import sys
import argparse
import json
import re
import logging
from pathlib import Path

# Add the current directory to the Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from core.scanner_engine import SecurityScannerEngine
from core.config_manager import ConfigManager


def setup_logging(verbose: bool = False):
    """Set up logging system"""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler()]
    )


def main():
    """Main function"""
    parser = argparse.ArgumentParser(
        description='NutriHelp Security Scanner V2.0 - Modular security scanner',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
        Example usage:
        %(prog)s --target ../                    # Scan parent directory
        %(prog)s --target ../ --format json     # Output in JSON format
        %(prog)s --target ../ --output report.html --format html
        %(prog)s --config custom_config.yaml --target ../
                """
            )
    
    parser.add_argument('--target', '-t', required=True,
                       help='Target directory path')
    parser.add_argument('--config', '-c',
                       help='Configuration file path')
    parser.add_argument('--format', '-f', default='summary',
                       choices=['json', 'html', 'summary'],
                       help='Output format (default: summary)')
    parser.add_argument('--output', '-o',
                       help='Output file path (default: stdout)')
    parser.add_argument('--verbose', '-v', action='store_true',
                       help='Show verbose logs')
    parser.add_argument('--version', action='version', version='%(prog)s 2.0.0')
    
    args = parser.parse_args()

    # Set up logging
    setup_logging(args.verbose)
    logger = logging.getLogger("main")
    
    try:
        logger.info("Starting NutriHelp Security Scanner V2.0")

        # 1. Load configuration
        config_manager = ConfigManager(args.config)
        if not config_manager.validate_config():
            logger.error("Configuration validation failed")
            return 1

        # 2. Initialize scanner engine
        scanner_config = config_manager.get_scanner_config()
        engine = SecurityScannerEngine(scanner_config)

        # 3. Load plugins
        plugin_configs = config_manager.get_enabled_plugins()
        engine.load_plugins(plugin_configs)
        
        if engine.stats['plugins_loaded'] == 0:
            logger.warning("No plugins loaded! Scanner will not find any issues.")

        # 4. Execute scan
        logger.info(f"Scanning target: {args.target}")
        scan_results = engine.scan_target(args.target)

        # 5. Generate output
        output_content = format_output(scan_results, args.format, config_manager)

        # 6. Write output
        if args.output:
            write_output_file(output_content, args.output, args.format)
            logger.info(f"Results saved to: {args.output}")
        else:
            print(output_content)

        # 7. Set exit code
        critical_count = scan_results['summary']['by_severity'].get('CRITICAL', 0)
        if critical_count > 0:
            logger.warning(f"Found {critical_count} critical security issues!")
            return 1
        
        logger.info("Scan completed successfully")
        return 0
        
    except FileNotFoundError as e:
        logger.error(f"File not found: {e}")
        return 1
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


def format_output(scan_results: dict, output_format: str, config_manager: ConfigManager) -> str:
    """Format output results"""
    if output_format == 'json':
        return json.dumps(scan_results, indent=2, ensure_ascii=False)
    
    elif output_format == 'html':
        return generate_html_report(scan_results, config_manager)
    
    elif output_format == 'summary':
        return generate_summary_report(scan_results)
    
    else:
        raise ValueError(f"Unsupported output format: {output_format}")


def generate_summary_report(scan_results: dict) -> str:
    """Generate summary report"""
    summary = scan_results['summary']
    findings = scan_results['findings']
    scan_info = scan_results['scan_info']
    
    lines = []
    lines.append("🔒 NutriHelp Security Scanner V2.0 Results")
    lines.append("=" * 50)
    lines.append("")

    # Scan information
    lines.append(f"📁 Target: {scan_info['target_path']}")
    lines.append(f"⏰ Scan Time: {scan_info['timestamp']}")
    lines.append(f"📊 Files Scanned: {scan_info['stats']['files_scanned']}")
    lines.append(f"🔌 Plugins Used: {scan_info['stats']['plugins_loaded']}")
    lines.append("")

    # Summary statistics
    lines.append("📊 Issues Found by Severity:")
    severity_colors = {
        'CRITICAL': '🔴',
        'HIGH': '🟠', 
        'MEDIUM': '🟡',
        'LOW': '🟢'
    }
    
    total_issues = summary['total']
    if total_issues == 0:
        lines.append("   ✅ No security issues found!")
    else:
        for severity in ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']:
            count = summary['by_severity'].get(severity, 0)
            if count > 0:
                color = severity_colors.get(severity, '⚪')
                lines.append(f"   {color} {severity}: {count}")
    
    lines.append("")
    lines.append(f"Total Issues: {total_issues}")

    # Plugin statistics
    if summary['by_plugin']:
        lines.append("")
        lines.append("🔌 Issues by Plugin:")
        for plugin_name, count in summary['by_plugin'].items():
            lines.append(f"   • {plugin_name}: {count}")

    # Critical issues details
    critical_findings = [f for f in findings if f.get('severity') == 'CRITICAL']
    if critical_findings:
        lines.append("")
        lines.append("🚨 CRITICAL ISSUES (Need immediate attention):")
        lines.append("-" * 40)
        
        for i, finding in enumerate(critical_findings[:5], 1):  # Only show the first 5
            lines.append(f"{i}. {finding['title']}")
            lines.append(f"   📁 File: {finding['file_path']}")
            if finding.get('line_number'):
                lines.append(f"   📍 Line: {finding['line_number']}")
            lines.append(f"   📝 {finding['description']}")
            lines.append("")
        
        if len(critical_findings) > 5:
            lines.append(f"   ... and {len(critical_findings) - 5} more critical issues")

    # High priority issues overview
    high_findings = [f for f in findings if f.get('severity') == 'HIGH']
    if high_findings and len(high_findings) <= 3:  # Only show when high priority issues are few
        lines.append("")
        lines.append("🔶 HIGH PRIORITY ISSUES:")
        lines.append("-" * 30)
        
        for finding in high_findings:
            lines.append(f"• {finding['title']} ({finding['file_path']})")
    
    lines.append("")
    lines.append("💡 Use --format html for detailed visual report")
    lines.append("💡 Use --format json for machine-readable output")
    
    return '\n'.join(lines)


def generate_html_report(scan_results: dict, config_manager: ConfigManager) -> str:
    """Generate HTML report with improved formatting and better recommendations"""
    summary = scan_results['summary']
    findings = scan_results['findings']
    scan_info = scan_results['scan_info']
    
    html_template = """
    <!DOCTYPE html>
    <html lang="zh-CN">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>NutriHelp Security Scanner V2.0 Report</title>
        <style>
            * {{ margin: 0; padding: 0; box-sizing: border-box; }}
            body {{ 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                margin: 20px; background: #f5f5f5; line-height: 1.6;
            }}
            .container {{ 
                max-width: 1200px; margin: 0 auto; background: white; 
                border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); overflow: hidden;
            }}
            .header {{ 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                color: white; padding: 30px; text-align: center;
            }}
            .header h1 {{ font-size: 2.5em; margin-bottom: 10px; }}
            .header .meta {{ opacity: 0.9; font-size: 1.1em; }}
            .stats {{ 
                display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
                gap: 20px; padding: 30px; background: #f8f9fa;
            }}
            .stat-item {{ 
                text-align: center; padding: 20px; background: white; 
                border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }}
            .stat-number {{ font-size: 2.5em; font-weight: bold; margin-bottom: 5px; }}
            .stat-label {{ color: #666; font-size: 1.1em; }}
            .critical {{ color: #dc3545; }}
            .high {{ color: #fd7e14; }}
            .medium {{ color: #ffc107; }}
            .low {{ color: #28a745; }}
            .content {{ padding: 30px; }}
            .section-title {{ 
                font-size: 1.8em; margin-bottom: 20px; color: #2c3e50;
                border-bottom: 3px solid #667eea; padding-bottom: 10px;
            }}
            .finding {{ 
                border: 1px solid #dee2e6; border-radius: 8px; 
                margin-bottom: 20px; overflow: hidden; transition: transform 0.2s ease;
            }}
            .finding:hover {{ transform: translateY(-2px); box-shadow: 0 4px 8px rgba(0,0,0,0.1); }}
            .finding-header {{ 
                padding: 15px 20px; display: flex; 
                justify-content: space-between; align-items: center;
                background: #f8f9fa; border-bottom: 1px solid #dee2e6;
            }}
            .finding-title {{ 
                font-size: 1.2em; font-weight: bold; color: #2c3e50; 
                margin: 0; flex-grow: 1;
            }}
            .severity {{ 
                padding: 5px 15px; border-radius: 20px; 
                color: white; font-weight: bold; font-size: 0.9em;
                text-transform: uppercase; margin-left: 15px;
            }}
            .severity.critical {{ background: #dc3545; }}
            .severity.high {{ background: #fd7e14; }}
            .severity.medium {{ background: #ffc107; color: #333; }}
            .severity.low {{ background: #28a745; }}
            .severity.info {{ background: #17a2b8; }}
            
            .file-info {{ 
                padding: 12px 20px; background: #e9ecef; 
                font-family: 'Courier New', monospace; font-size: 0.9em; 
                color: #495057; border-bottom: 1px solid #dee2e6;
                display: flex; align-items: center;
            }}
            .file-info .file-icon {{ 
                margin-right: 8px; color: #6c757d; 
            }}
            
            .description {{ 
                padding: 20px; color: #495057; 
                background: white; font-size: 1em;
                border-bottom: 1px solid #f1f3f4;
            }}
            
            .recommendation {{ 
                padding: 20px; background: #e3f2fd; 
                border-left: 4px solid #2196f3;
                color: #0d47a1; position: relative;
            }}
            .recommendation strong {{ 
                color: #1976d2; font-size: 1.1em;
                display: block; margin-bottom: 10px;
            }}
            .recommendation .rec-section {{
                margin: 15px 0;
            }}
            .recommendation .rec-section h4 {{
                color: #1976d2; margin-bottom: 8px; font-size: 1.05em;
            }}
            .recommendation .rec-code {{
                background: #f5f5f5; padding: 12px; border-radius: 4px;
                font-family: 'Courier New', monospace; font-size: 0.9em;
                color: #333; margin: 8px 0; overflow-x: auto;
                border: 1px solid #ddd;
            }}
            .recommendation ol, .recommendation ul {{
                margin: 10px 0 10px 20px;
            }}
            .recommendation li {{
                margin: 5px 0;
            }}
            
            .plugin-info {{
                padding: 8px 20px; background: #f8f9fa; 
                font-size: 0.85em; color: #6c757d;
                text-align: right; border-top: 1px solid #e9ecef;
            }}
            
            .no-issues {{ 
                text-align: center; padding: 60px 20px; 
                background: #d4edda; color: #155724; border-radius: 8px;
            }}
            .no-issues h2 {{ font-size: 2em; margin-bottom: 15px; }}
            .footer {{ 
                text-align: center; padding: 30px; 
                background: #2c3e50; color: white;
            }}
            .footer p {{ margin: 5px 0; }}
            
            @media (max-width: 768px) {{
                .finding-header {{ flex-direction: column; align-items: flex-start; }}
                .severity {{ margin-left: 0; margin-top: 10px; }}
                .stats {{ grid-template-columns: 1fr 1fr; }}
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>🔒 NutriHelp Security Scanner V2.0</h1>
                <div class="meta">
                    <div>Scan time: {timestamp}</div>
                    <div>Target path: {target_path}</div>
                    <div>Scanner version: {scanner_version}</div>
                </div>
            </div>
            
            <div class="stats">
                <div class="stat-item">
                    <div class="stat-number critical">{critical_count}</div>
                    <div class="stat-label">Critical Issues</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number high">{high_count}</div>
                    <div class="stat-label">High Severity</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number medium">{medium_count}</div>
                    <div class="stat-label">Medium Severity</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number low">{low_count}</div>
                    <div class="stat-label">Low Severity</div>
                </div>
            </div>
            
            <div class="content">
                <div class="stats">
                    <div class="stat-item">
                        <div class="stat-number">{files_scanned}</div>
                        <div class="stat-label">Files Scanned</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">{plugins_used}</div>
                        <div class="stat-label">Plugins Used</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">{total_findings}</div>
                        <div class="stat-label">Total Issues</div>
                    </div>
                </div>
                
                {findings_html}
            </div>
            
            <div class="footer">
                <p>Generated by <strong>NutriHelp Security Scanner V2.0</strong></p>
                <p>For support, visit our documentation or contact the development team</p>
            </div>
        </div>
    </body>
    </html>
    """
    
    # Generate HTML for findings
    if not findings:
        findings_html = '<div class="no-issues"><h2>✅ No Security Issues Found!</h2><p>Your codebase has passed all security checks.</p></div>'
    else:
        findings_html = '<h2 class="section-title">🔍 Detailed Findings</h2>'

        # Sort by severity
        sorted_findings = sorted(findings, key=lambda x: {
            'CRITICAL': 0, 'HIGH': 1, 'MEDIUM': 2, 'LOW': 3, 'INFO': 4
        }.get(x.get('severity', 'MEDIUM'), 2))
        
        for finding in sorted_findings:
            severity = finding.get('severity', 'MEDIUM').lower()
            
            # Format recommendation with proper HTML structure
            recommendation = finding.get('recommendation', 'Please review this security issue and take appropriate remediation steps.')
            formatted_recommendation = recommendation.replace("\n\n", "</p><p>").replace("\n", "<br>") if not recommendation.startswith("<p>") else recommendation
            
            finding_html = f"""
            <div class="finding">
                <div class="finding-header">
                    <div class="finding-title">{finding['title']}</div>
                    <span class="severity {severity}">{finding['severity']}</span>
                </div>
                
                <div class="file-info">
                    <span class="file-icon">📄</span>
                    {finding['file_path']}
                    {f" (Line {finding['line_number']})" if finding.get('line_number') else ''}
                </div>
                
                <div class="description">{finding['description']}</div>
                
                <div class="recommendation">
                    <strong>💡 Recommendation:</strong>
                    {formatted_recommendation}
                </div>
                
                <div class="plugin-info">
                    Plugin: {finding.get('plugin_name', finding.get('plugin', 'Unknown'))}
                </div>
            </div>
            """
            findings_html += finding_html

    # Format timestamp safely
    from datetime import datetime
    
    timestamp = (
        scan_results.get('timestamp') or 
        scan_info.get('timestamp') or 
        datetime.now().isoformat()
    )
    
    try:
        if 'Z' in str(timestamp):
            timestamp_obj = datetime.fromisoformat(str(timestamp).replace('Z', '+00:00'))
        else:
            timestamp_obj = datetime.fromisoformat(str(timestamp))
        formatted_timestamp = timestamp_obj.strftime('%Y-%m-%d %H:%M:%S')
    except Exception:
        formatted_timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    return html_template.format(
        timestamp=formatted_timestamp,
        target_path=scan_info.get('target_path', '../'),
        scanner_version=scan_info.get('scanner_version', '2.0.0'),
        critical_count=summary['by_severity'].get('CRITICAL', 0),
        high_count=summary['by_severity'].get('HIGH', 0),
        medium_count=summary['by_severity'].get('MEDIUM', 0),
        low_count=summary['by_severity'].get('LOW', 0),
        files_scanned=scan_info.get('stats', {}).get('files_scanned', 0),
        plugins_used=scan_info.get('stats', {}).get('plugins_loaded', 0),
        total_findings=summary['total'],
        findings_html=findings_html
    )


def write_output_file(content: str, file_path: str, output_format: str):
    """Write output file"""
    # Ensure output directory exists
    output_dir = os.path.dirname(file_path)
    if output_dir and not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Determine encoding
    encoding = 'utf-8'
    
    with open(file_path, 'w', encoding=encoding) as f:
        f.write(content)


if __name__ == '__main__':
    sys.exit(main())