name: CI + SecurityScanWorkflow

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
env:
  NODE_VERSION: "20"
  OPENAPI_FILE: 'index.yaml'
  PORT: '3000' 

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json
      - run: npm ci --prefer-offline --no-audit --no-fund
 
     
      - name: Ensure minimal ESLint config
        run: |
          node -e "const fs=require('fs');const has=['.eslintrc.json','.eslintrc.js','eslint.config.js'].some(f=>fs.existsSync(f));if(!has){fs.writeFileSync('.eslintrc.json',JSON.stringify({root:true,env:{es2021:true,node:true,browser:true},parserOptions:{ecmaVersion:2022,sourceType:'module'},ignorePatterns:['node_modules/','dist/','build/','coverage/'],rules:{curly:'off',eqeqeq:'off','no-undef':'off','no-unused-vars':'off'}},null,2));}"
   
      - name: Run ESLint (non-blocking)
        run: npx -y eslint@8.57.0 . --no-error-on-unmatched-pattern --quiet || true
      
  run-security-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get list of changed files (new and modified)
        id: changed-files
        run: |
          git fetch origin master --depth=1
          MODIFIED_FILES=$(git diff --name-only origin/master ${{ github.sha }} | tr '\n' ' ')
          echo "MODIFIED_FILES=${MODIFIED_FILES}" >> $GITHUB_ENV

      - name: Set up Python environment
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Vulnerability Scanner on all changed files
        run: |
          if [[ -z "$MODIFIED_FILES" ]]; then
            echo "No modified files to scan."
            exit 0
          fi
          for file in $MODIFIED_FILES; do
            echo "Scanning $file..."
            python3 Vulnerability_Tool/Vulnerability_Scanner_V1.4.py "$file" >> security_scan_report.txt
          done

      - name: Save scan results as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-report
          path: security_scan_report.txt
